# This is a sample score file for echomesh.
#
# The character # introduces comments.  The first several pages of this example
# score are comments explaining how scores are put together.
#
#
# *** The Model ***
#
# echomesh's model is simple:
#
#   1. There are multiple named machines:
#      - In our installation today, we have President, Chairman, Treasurer
#        and Secretary.
#   2. A Machine receive Events and sends them to the whole system.
#   3. There's a main list of Elements called the Score.
#   4. Scores are also elements so you can use Scores inside other Scores.
#   5. With a Score, some Elements receive Events and route them to other
#      Elements.
#
#
#  *** Elements ***
#
# This whole file is nothing more than a list of Elements, so you'll see a lot of
# examples of Elements below.  (Technically, we are using the YAML data language,
# which is upwardly compatible with JSON - see here:
# http://www.yaml.org/spec/1.2/spec.html#Preview )
#
#
# *** Types of Elements ***
#
# Some types of Element:
#   audio: plays an audio clip
#   image: shows and animates an image
#   select: selects a Function (and arguments) at random from a list.
#   print: prints a message on the console (for debugging).
#
#
# *** Envelopes ***
#
# Some Elements have Envelope keywords - keywords that can change over time.
#
# You can specify Envelopes in two ways: you can specify a constant value, or you
# can have a list of times (in seconds) and values, called an Envelope.  You'll
# see examples of both cases below.  The system linearly interpolates between
# points in an envelope.  You'll see examples below.
#
#
# *** Events ***
#
# We have three classes of Event right now - mic, random and sequence
#
# mic Events happen when there's a gross input level change on one of the
# microhones.
#
# random Events occur intermittently "on their own time".
#
# sequence Events occur at a sequence of times in the future.
#
#
#  *** Audio ***
#
# The audio Element has the following keywords:
#
#  - filename:  compulsory keyword that says which file to play.
#
#  - level:     Envelope keyword giving the sound level.
#               Default is a constant 1.
#
#  - pan:       Envelope keyword giving the left/right pan.
#               -1 is left, 1 is right - default is a constant 0 (center).
#
#
# *** Image ***
#
# The image Function has the following keywords:
#
#  - filename:  compulsory keyword that says which image file to display.
#
#  - position:  Envelope keyword giving the position on the screen.
#               Default is a constant (0, 0).
#
#  - rotation:  Envelope keyword specifying the angular rotation of the image
#               in degrees between 360.  Default is 0 degrees, unrotated.
#
#  - size:      Envelope keyword telling how to shrink or expand the image.
#               Default is 1.0 - "original size".
#
#  - z:         Envelope keyword indicating "z order" on the screen (which image
#               is above which other image).  Default is 0.0 - you can use both
#               negative and positive z values.
#
#  - duration:  A single number indicating how long to display this image on
#               the screen.  If you have any Envelope keywords, this is
#               optional, and the image will be shown for the duration of the
#               longest envelope.
#
# Note that at this time, image manipulation can only be done on the Raspberry Pi.
#
#
# *** An actual Element ***
#
# We finally get to see an actual Element:

type: handler       # This Element is an event handler.
subtype: mic        # This element triggers when a microphone changes levels.

source: President   # This means that this element only triggers on events coming
                    # FROM the Machine named President.

target: President   # This means that this element only triggers ON the Machine
                    # named President.
                    #
                    # If you omit the "source" field, the element will trigger on
                    # all incoming events regardless of source Machine
                    #
                    # If you omit the "target" field, the element will trigger on
                    # all Machines.

mapping:
  silent:                  # Trigger this Function when the microphone goes "silent"
    type: image
    file: ghost.gif        # Show ghost.gif
    position: [100, 100]   # at [100, 100]
    duration: 10.0         # for 10 seconds.

  loud:                    # Trigger this Function when the microphone goes "loud"
    type: image
    file: goblin.gif
    position:
      - [0, [100, 100]]    #  Start at 100, 100 at time 0.
      - [5, [1000, 100]]   #  Move to [1000, 100] by time 5
      - [15, [100, 1000]]  #  Move to [100, 1000] by time 15

  _default:  # Trigger for everything else.
    type: print

---
# Three dashes signifies the start of a new Element.

# The Random Element triggers automatically based on a random variable.

type: random
subtype: poisson

mean: 3.0                  # Trigger on average every 3 seconds.

elements:
  type: select
  choices:                   # Select one of these elements at random.
    -
      weight: 2
      elements:
        type: image
        file: $random
        position: [200, 200]
        loops: 3
        size: [[0, 0.10], [1, 5.0], [2, 0.0]]

    -
      weight: 3
      elements:
        type: image
        file: $random
        position: [[0, [100, 100]], [20, [1000, 1000]]]
        size: [[0, 0.10], [5, 1.0], [10, 0.0], [18, 1.0], [20, 0.10]]
        rotation: [[0, 0], [5, 360], [10, -360], [18, 360], [20, 0]]

---

# The Sequence Element triggers events in temporal sequence.

type: sequence
duration: 20 seconds
loops: 3

elements:
  -
    time: 0
    elements:
      type: image
      file: $random
      position: [[0, [100, 100]], [20, [1000, 1000]]]
      size: [[0, 0.10], [5, 1.0], [10, 0.0], [18, 1.0], [20, 0.10]]
      rotation: [[0, 0], [5, 360], [10, -360], [18, 360], [20, 0]]
  -
    time: 3.0
    elements:
      type: image
      file: $random
      position: [[0, [100, 100]], [20, [1000, 1000]]]
      size: [[0, 0.10], [5, 1.0], [10, 0.0], [18, 1.0], [20, 0.10]]
      rotation: [[0, 0], [5, 360], [10, -360], [18, 360], [20, 0]]
  -
    time: 10.0
    elements:
      type: image
      file: $random
      position: [[0, [100, 100]], [20, [1000, 1000]]]
      size: [[0, 0.10], [5, 1.0], [10, 0.0], [18, 1.0], [20, 0.10]]
      rotation: [[0, 0], [5, 360], [10, -360], [18, 360], [20, 0]]
  -
    time: 11.0
    elements:
      type: image
      file: $random
      position: [[0, [100, 100]], [20, [1000, 1000]]]
      size: [[0, 0.10], [5, 1.0], [10, 0.0], [18, 1.0], [20, 0.10]]
      rotation: [[0, 0], [5, 360], [10, -360], [18, 360], [20, 0]]
  -
    time: 12.0
    elements:
      type: image
      file: $random
      position: [[0, [100, 100]], [20, [1000, 1000]]]
      size: [[0, 0.10], [5, 1.0], [10, 0.0], [18, 1.0], [20, 0.10]]
      rotation: [[0, 0], [5, 360], [10, -360], [18, 360], [20, 0]]

---

type: TwitterSearch
interval: 10
search:
  - #echomesh
  - #tomswirly
