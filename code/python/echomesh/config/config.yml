# This is the default configuration for the entire system.
#
# If you add a new configuration value, you must add its default value as an
# entry in this file - this is automatically checked at runtime if the Python
# variable Config.ALLOW_EMPTY_OPTIONS is False, which it is by default, so if
# you try to get a configuration that doesn't exist in the default file, you'll
# throw an Exception.

type: config

aliases:
  save_with_project: false

# Can you remotely request the shutdown and restart of this machine?
allow_shutdown: true

# Do changes to the configuration save automatically?
autosave: true

# Enable autostart.
#
# You still have to configure your computer to automatically run echomesh before
# this flag has any effect.  It's mostly used for temporarily turning off the
# program actually starting while you're debugging it.

autostart: false

audio:
   # The audio section is the longest section in the whole config file.

  input:
    # This section configures the audio input, usually a microphone.

    channels: 1
    chunk_size: 4096   # The number of samples in one chunk.

    # If this is false, then audio input is disabled.
    enable: true

    device_name: ""

    # A list of possible sample rates.  When opening the input device, echomesh
    # tries each of these rates in order, selecting the first one which works.
    # All interfaces we have tested seem to support one of the sample rates
    # in this default file.
    sample_rate: 8000

    # If verbose is true, then every incoming level from the microphone is
    # printed on the console - very spammy.
    verbose: false

    # This is a list of mapping from db levels to microphone levels.
    # BUG: For the moment, you can't use unit conversions in this area, so
    # don't put "db" after these numbers:
    # https://github.com/rec/echomesh/issues/195
    levels:
      silent: -37
      quiet: -25
      medium: -15
      loud: 0

  # We're still in the "audio:" section of the config file; next is the
  # output subsection.

  output:
    chunk_size: 1024

    enable: true

    # Do we route the audio to the HD or the earphone audio jack?
    # Disabled, see https://github.com/rec/echomesh/issues/197.
    route: audio

# Do we get and process commands from the keyboard?
# Set this to "false" for autostart jobs.
# TODO: this needs to be rethought and perhaps re-integrated with autostart.
control_program: true

delay_before_keyboard_activates: 0.5 seconds
delay_before_run: 0.1 seconds

# The "transfer" operation overwrites all the score files on all the target
# machines.  A backup is made during the transfer in case it fails halfway
# through.
#
# If :delete_backups_after_transfer is true, that backup is deleted after the
# transfer is complete, otherwise that backup is kept around until the next
# transfer is started.

delete_backups_after_transfer: false

# Turns on various debugging mechanisms and gives better diagnositics.
debug: false

diagnostics:
  # The diagnostics section lets echomesh developers get more information
  # about the running program.

  # If true, on quit echomesh prints a list millisecond startup timings
  # for the code in Main.py.
  startup_times: false

  # If true, or if debug is true, when there's any exception in the system, the
  # entire stack trace is printed out.
  stack_traces: false

  # If true, on quit echomesh prints a list of configs that were never read.
  unused_configs: false

# The discovery section controls how the echomesh unit contacts other nodes.
network:
  client:
    allow_reuse_address: true
    buffer_size: 4096
    debug: false
    host_name: localhost
    input_file: ""
    pipe_stdin: true
    pipe_stdout: true
    port: 1239
    start: true
    timeout: 0.1

  discovery:
    port: 1238
    timeout: 0.1

  startup:
    retries: 20
    timeout: 0.25

  timeout: 0.1

# The git section sets the user, project name and server for a git repository
# connected to the echomesh project.  Please note that you'll still have to
# authenticate your machine to your git host if you want to check in changes
# from remote hosts.
git:
  user: rec
  project: echomesh
  server: github.com

# Enable lighting control.  Note that your program has to be running as sudo
# for the lighting to work.
light:
  brightness: 100%
  count: 1024
  enable: false

  hardware:
    enable: true
    period: 5ms
    local: true  # Do we use this?
    rgb_order: rgb

  visualizer:
    enable: true
    period: 60Hz
    show: true
    transform: null  # Should this be brightness_transform?

    background: white
    layout: [10, 12]
    padding: [3, 3]
    top_left: [0, 44]
    instrument:
      background: 0x606060
      border:
        color: black
        width: 1
      label: false
      label_padding: [2, 2]
      label_starts_at_zero: false
      padding: [2, 2]
      paint_unclipped: false
      shape: circle
      size: [12, 12]

# The logging section controls the destination of informational and warning
# messages.
logging:
  # To redirect logging to a file, set :logging:file to point to the output
  # file you want.  Note that the echomesh will overwrite old log files without
  # a warning.
  file: ""  # Empty means "don't log to a file".

  # This is the long output format for log messages - it includes
  #   * the time
  #   * the level of logging (debug, info, warning, error, critical)
  #   * the name of the Python file it came from
  #   * the actual message.
  # format: "%(asctime)s %(levelname)s: %(name)s: %(message)s"

  # An empty format means that the program decides what format to use based on
  # your diagnostics level and error level.
  format: ""

  # This filters out the levels of logging.  At the default "info" level,
  # you'll everything except debugging information.
  level: info

  # Do we redirect cechomesh's glog logging to Python?
  redirect_glog: true

midi:
  input:
    external: true
    index: -1
    name: ""

  output:
    external: true
    index: -1
    name: ""

# Set the name of the machine, overriding
# This gives you a last-ditch ability to override your own name.
name: ""

# The OpenSoundControl protocol named OSC
osc:
  client:
    enable: false
    port: 2222   # The default port for any hosts.
    host: localhost

    # TODO: extend the host field to allow a list of hosts,
    # looking like hostname:portnumber, where portnumber is optional
    # and defaults to osc.client.port.

  server:
    enable: false
    port: 2222
    timeout: 0.5

# The permissions area controls whether this machine is allowed to perform
# the system activities boot, halt, initialize, quit or update.
permission:
  autostart: true
  boot: true
  exec: false
  halt: true
  initialize: true
  quit: true
  shutdown: true
  update: true

# These are the configuration settings for the pi3d Open GL library - please
# see http://pi3d.github.com
pi3d:
  aspect: null
  background: [0, 0, 0, 0]  # Red, green, blue, alpha.
  depth: null
  dimensions: null  # Can be a 4-tuple: x, y, width, height.
  enable: false
  far: null
  frames_per_second: 30
  full_screen: true
  near: null
  tk: False
  window_title: ""

# The path to your project's root directory.
project: ""

speed: 100%

tag: []

# RUNNING OR LOADING SCORES ON STARTUP
#
# Any scores listed in score: will be loaded and started when echomesh starts
# up; and any scores listed in load: will be loaded but not started.
#
# You can either request a single score, like:
#
#   score:  myScore.yml
#
# or a list of scores, like:
#
#   load:
#     - myScore1.yml
#     - myScore2.yml
#
# or, equivalently,
#
#   score: [myScore1.yml, myScore2.yml]
#
# or even a free-form list of scores and names using the word "as".
#
#   score:  myScore1.yml as m1, myScore2.yml as m2
#   score:  myScore2.yml myScore1.yml as m2, m1

start: ""

# Any scores in load: will be loaded on startup but not run.
# See the comments above for score:

load: ""

# echomesh lets you assign names and tags to echomesh nodes by filling in this
# :map area in your global score.  This is particularly handy when you have a
# lot of machines with completely identical disk images that you need to keep
# track of neatly.

map:
  # The name section assigns names to echomesh nodes.
  #
  # When echomesh starts up, it goes to the table in :map:name.
  #
  # First it looks in the table for its MAC address - the unique hardware
  # signature of the machine.
  # If it doesn't find the MAC address, it then looks for the IP address,
  # the internet routing address of the machine.
  name: {}
  tag: {}

# The new section is reserved for configuration values for elements and commands
# written by third parties.
new: {}
